# ТЗ: Character LoRA One‑Click (для Easy Diffusion + dreamshaper_8)

## 0) Резюме
**Цель:** по одной команде превратить набор референсов персонажа (фото/арт) в готовую LoRA‑модель и автоматически положить её в каталог LoRA Easy Diffusion. Основная целевая базовая модель — **dreamshaper_8 (SD1.5‑семейство)**.

**Ключевой сценарий:**
```
charlora train --name <id> --input </path/to/refs>
```
Скрипт сам: (1) готовит датасет → (2) обучает LoRA (локально или на удалённом GPU) → (3) копирует `.safetensors` в папку LoRA Easy Diffusion → (4) выводит триггер‑токен и рекомендуемый вес.

---

## 1) Область применения и ценность
- Консистентные изображения одного и того же персонажа в разных сценах и стилях.
- Простая эксплуатация для пользователя: «кинул фотки → получил LoRA → использую в ED».
- Технически: оркестрация подготовки данных и обучения без ручной рутины.

**Вне области (MVP):** облачный UI, платёжки, общий хостинг для третьих лиц, полноценный DreamBooth.

---

## 2) Совместимость и допущения
- **База:** SD1.5. Целевой чекпойнт — **dreamshaper_8**; для совместимости LoRA рекомендуется обучать **на dreamshaper_8** либо на максимально близком SD1.5‑чекпойнте.
- **Easy Diffusion (ED):** уже установлен локально (macOS). Путь к каталогу LoRA задаётся в конфиге.
- **GPU‑тренировка:**
  - Локально (Linux + NVIDIA + Docker) **или**
  - Удалённый Linux‑сервер по SSH (NVIDIA + Docker).
- macOS используется как «оркестратор» (команда запуска, копирование артефактов в ED). При отсутствии локального CUDA обучение идёт на удалённом сервере.

---

## 3) Пользовательский флоу (One‑Click)
1. Пользователь собирает 12–25 референсов персонажа (разные ракурсы/свет/эмоции; без агрессивной ретуши).
2. Запускает команду:
   ```
   charlora train --name sofia --input ~/Pictures/sofia_refs
   ```
3. Получает вывод:
   - путь к сохранённой LoRA: `<ED_LORA_DIR>/sofia_lora_ds8_v1.safetensors`
   - **Trigger token:** `svtchar`
   - **Рекомендуемый вес:** `0.7–0.85`
   - советы по самплеру/CFG/шагам для ED

---

## 4) Архитектура и компоненты
```
CLI (charlora)
  ├─ prep_faces.py      # подготовка датасета (кроп/resize/подписи)
  ├─ make_lora.sh       # обучение (локально/SSH) + копия артефакта в ED
  ├─ config.yaml        # конфиг путей, гиперпараметров, режимов
  └─ prompts/*.passport.json  # «паспорт» персонажа (meta + подсказки)

Backends
  ├─ kohya_ss (Docker)  # обучение LoRA (SD1.5/dreamshaper_8)
  └─ (опц.) InsightFace/BLIP  # улучшенный препроцесс и капшены (после MVP)

Frontend (UI)
  ├─ Веб‑UI (React/Tailwind + FastAPI backend) — MVP
  └─ Tauri desktop‑обёртка (опц.) — для дальнейшего нативного UX
```

**Режимы:**
- `local_docker: true` — обучение в Docker на локальном Linux с GPU.
- `local_docker: false` — обучение по SSH на удалённом сервере с GPU.

---

## 5) Конфиг (пример `config.yaml`)
```yaml
ed_lora_dir: "/Users/you/EasyDiffusion/models/lora"

base_model:  # SD1.5 семейство
  use: "ds8"                 # ключ текущей базы
  ds8: "/srv/models/dreamshaper_8.safetensors"  # локально (Linux) или на сервере
  sd15: "/srv/models/v1-5-pruned-emaonly.safetensors"

trigger_token: "svtchar"

local_docker: false           # Mac как оркестратор; тренировка по SSH

ssh:
  host: "gpu.myhost"
  user: "wiz"
  workdir: "/home/wiz/charlora_runtime"
  remote_base_model:
    ds8: "/srv/models/dreamshaper_8.safetensors"
    sd15: "/srv/models/v1-5-pruned-emaonly.safetensors"

train:                        # гиперпараметры под SD1.5/dreamshaper_8
  resolution: 512             # SD1.5 «родное» разрешение
  steps: 2500
  network_dim: 32
  unet_only: true
  lr_unet: 0.0001
  lr_text: 0.00005            # можно включить позже
  noise_offset: 0.05
  caption_dropout: 0.1
  save_every: 500
```

> Примечание: для dreamshaper_8 (SD1.5) базовое **resolution=512** самое совместимое. Для портретов допустим 640/768, но держим 512 для надёжности и VRAM‑экономии.

---

## 6) Подготовка датасета (MVP)
- Поддерживаемые форматы: JPG/PNG/WEBP.
- Лёгкий препроцесс: кроп до квадрата с паддингом → resize в `resolution×resolution` → сохранение.
- Капшены: простые текстовые файлы `<idx>.txt` с триггер‑токеном и базовыми признаками (дальше можно заменить на BLIP/ручные).
- Генерация «паспорта персонажа» (`<name>.passport.json`) с trigger token, негативным шаблоном и подсказками по инференсу.

**Минимальные требования к данным:**
- 8 изображений минимум (для старта), 12–25 — рекомендовано.
- Разнообразие ракурсов: фронт/¾/профиль + 1–2 кадра «в полный рост».
- Константы образа: цвет глаз/волос, стрижка, шрамы/родинки — должны встречаться несколько раз.

---

## 7) Обучение LoRA (kohya_ss, SD1.5)
- Обучаем **на dreamshaper_8** (рекомендовано) либо на SD1.5 базовом.
- Начинаем с `UNet only`. Если «не держит» образ — добавляем лёгкое обучение text‑encoder (`lr_text` низкий).
- Контроль переобучения: сохраняем чекпойнты каждые `save_every` шагов; эвал простым предпросмотром 2–3 промтов.

**Команда (концепт через Docker):**
```
accelerate launch train_network.py \
  --pretrained_model_name_or_path /workspace/base.safetensors \
  --train_data_dir /workspace/data/images \
  --caption_metadata_dir /workspace/data/captions \
  --resolution 512,512 \
  --network_module lycoris.kohya \
  --network_dim 32 \
  --learning_rate 1e-4 \
  --text_encoder_lr 5e-5 \
  --train_unet_only \
  --output_dir /workspace/out \
  --output_name <name>_lora_ds8_v1 \
  --max_train_steps 2500 \
  --min_snr_gamma 5 \
  --noise_offset 0.05 \
  --caption_dropout 0.1 \
  --save_every_n_steps 500 \
  --mixed_precision bf16
```

---

## 8) UI и UX
**MVP (веб‑версия):**
- React + Tailwind (см. прототип).
- Экран: ввод имени, триггер‑токена, базовой модели, параметров обучения, загрузка 8–25 файлов.
- Кнопка «▶︎ Запустить One‑Click».
- Панель статуса: текущее состояние (idle/prepping/training/copying/done), лог в реальном времени, путь к артефакту, подсказки для ED.
- Кнопки футера: «Открыть папку LoRA», «Экспорт паспорта персонажа», «Генерировать 3 тест‑сцены» (опц.).

**Дальше:**
- Обернуть в Tauri → полноценное десктоп‑приложение, доступ к ФС, auto‑open Finder/Explorer.
- Профили SSH (выбор удалённого GPU).
- Возможность дообучения: `charlora finetune` из UI.

---

## 9) API контракты (FastAPI backend)
- `POST /train` (multipart: files[] + params) → `{job_id}`
- `GET /jobs/{id}/status` → `{state, logs[], artifact_path?}`
- `GET /jobs/{id}/artifact` → `.safetensors`
- `POST /config/test` → проверка окружения (пути ED, Docker/SSH наличие)

---

## 10) Деплой артефакта в Easy Diffusion
- По завершении обучение файл `<name>_lora_ds8_v1.safetensors` копируется в `ed_lora_dir`.
- Скрипт печатает:
  - путь к файлу,
  - `Trigger token`,
  - рекомендуемый вес (0.7–0.85),
  - подсказки: самплер DPM++ 2M Karras, CFG 4–6, 28–40 steps.

**Проверка в ED:** выбрать базовую **dreamshaper_8**, подключить LoRA, ввести промт с `trigger_token` и (опц.) включить ControlNet (OpenPose/Depth) для стабильной композиции.

---

## 11) Критерии приёмки (MVP)
1. Одна команда `charlora train` отрабатывает без ручных шагов.
2. В ED появляется новая LoRA; её видно в списке; подключается без ошибок.
3. На трёх тестовых сценах (портрет, по пояс, полный рост) персонаж узнаваем ≥2/3 раз.
4. В веб‑UI виден статус/логи, артефакт и подсказки.
5. Документация: README с установкой, примером `config.yaml`, FAQ и «Как получить лучшие результаты».

---

## 12) Риски и смягчение
- **Несовместимость LoRA/базы:** обучать на том же семействе, что и инференс (для нас — dreamshaper_8/SD1.5).
- **Переобучение/слипание стиля:** следить за шагами, использовать разнообразные рефы, хранить версии `v1/v2`.
- **Недостаточно VRAM:** уменьшать `resolution`/`network_dim`/batch; тренировать на SD1.5, а не SDXL.
- **Качество данных:** добавить чек‑лист датасета и предупреждения (слишком однообразные ракурсы, тяжёлая ретушь).

---

## 13) Бэклог фич (после MVP)
- InsightFace (кадрирование по лицу), BLIP‑капшены + ручной редактор.
- IP‑Adapter FaceID/InstantID интеграция при инференсе.
- Версионирование и дообучение (`finetune`).
- Авто‑эвал похожести (face‑эмбеддинги, %).
- GUI‑обёртка Tauri.
- Presets сцен (портрет/экшен/фуллбоди).
- Пакетная тренировка персонажей.
- Политика приватности/NSFW‑чек.

---

## 14) Структура репозитория
```
charlora/
  README.md
  config.yaml.example
  charlora            # CLI‑обёртка
  make_lora.sh        # обучение + копирование в ED
  prep_faces.py       # препроцесс/капшены/паспорт
  ui/                 # React frontend
  work/               # временные данные (gitignore)
  prompts/
    sample.passport.json
  docs/
    HOWTO.md
```

---

## 15) Чек‑лист датасета (для пользователя)
- [ ] 12–25 изображений, 3+ ракурса (фронт/¾/профиль), 2+ эмоции, 1–2 «в полный рост»
- [ ] Без тяжёлых фильтров и плотной ретуши
- [ ] Волосы/цвет глаз/шрамы — повторяются в нескольких кадрах
- [ ] Разное освещение (не только студийный свет)
- [ ] Имя персонажа и триггер‑токен в конфиге выставлены

---

## 16) Быстрый гайд по использованию в Easy Diffusion
1. Выбрать базовую модель **dreamshaper_8**.
2. Подключить LoRA `<name>_lora_ds8_v1` c весом 0.7–0.85.
3. Промт: `svtchar, consistent character, <описание черт> …`
4. Самплер: DPM++ 2M Karras; Steps: 28–40; CFG: 4–6; (опц.) ControlNet OpenPose/Depth.

---

## 17) Лицензии и права
- Код: MIT (по умолчанию).
- Пользователь гарантирует права на предоставленные изображения. Храним данные локально, без пересылки третьим лицам (кроме выбранного пользователем удалённого GPU‑сервера).
